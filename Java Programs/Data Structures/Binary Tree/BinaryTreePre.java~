/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class BinaryTreePre {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list = new LinkedList<Integer>();
        // stack for recursive calls:
        Deque<TreeNode> stack = new ArrayDeque<TreeNode>();
        // copy of the root node:
        TreeNode currentNode = root;
        
        // recursive calls:
        while(currentNode!=null) {
            // add the data to the list:
            list.add(currentNode.val);
            stack.push(currentNode);
            // follow the recursion on the left subtree
            currentNode=currentNode.left;
        }
        
        // unfold the recursive calls:
        while(!stack.isEmpty()) {
            currentNode=stack.pop();
            
            // check if the solve recursion has right child:
            if(currentNode.right!=null) {
                // recurse on right
                currentNode=currentNode.right;
                list.add(currentNode.val);
                stack.push(currentNode);
                
                // check if there exist a left subtree
                if (currentNode.left!=null) {
                    currentNode=currentNode.left;
                    
                    // recurse on left
                    while(currentNode!=null) {
                        list.add(currentNode.val);
                        stack.push(currentNode);
                        currentNode=currentNode.left;
                    }
                } 
            }
        }
        
        return list;
    }

    private void recursivePreOrder(TreeNode root, List<Integer> list) {
        // base case:
        if(root==null) return ;
        list.add(root.val);
        recursivePreOrder(root.left, list);
        recursivePreOrder(root.right, list);
    }
}
