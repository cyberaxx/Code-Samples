
    // while has not reach the root node at index 1: no promotion higher than the root
    while(k>1) {
      int parent=k/2;
      int left=2*parent;
      int right=2*parent+1;

      // if the node k is the the left node
      if(k==left) {
        // check if there exist a right node:
        if(right<=N && less(right, k))  {
          exch(right, k); // if right node is less than the left node
          k=right; // move current node to right
        }

        // if there is no right node or k is left and k is smaller than right:
	else {
          // promote k if its parent is less than it otherwise terminate the promotion
          if(less(parent, k)) {
             exch(parent, k);
             k=parent;
          }
          else return ;
	}
      }	
      // if node k is the right node:
      else {
	// if node k is less than its left sibling	
	if(less(k, left)) {
          // exchange it with its left sibiling
          exch(k, left);
          k=left;
        }

        // if node k is NOT less than its left sibling	
	else {
	  // if its is less than the root, promot it to the root level
          if (less(k, parent)) {
	    exch(parent, k);
	    k=parent;
 	  }
 	  else return ;
  	}
      }
    }

