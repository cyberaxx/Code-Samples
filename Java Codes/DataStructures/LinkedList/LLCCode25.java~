/*
Given a circular linked list, implement an algorithm which returns node at the begin-
ning of the loop.
DEFINITION
Circular linked list: A (corrupt) linked list in which a nodeâ€™s next pointer points to an
earlier node, so as to make a loop in the linked list.
EXAMPLE
input: A -> B -> C -> D -> E -> C [the same C as earlier]
output: C
_____________________________________________________________
*/
public class LLCCode25{

  public static <Item> Node loopHead(LinkedList<Item> ll) {
    if(ll.size()==1 || ll.isEmpty()) return null;
    // we can use a hashSet buffer:
    // iterate over the linked list:
    Node current = ll.front;
    HashSet<Node> hs = new HashSet<Node>();
    while(current!=null) {
      if(hs.contains(current)) return current;
      else {
        hs.add(current);
        current=current.next;
      }
    }
    return null; // no loop
  }
}
